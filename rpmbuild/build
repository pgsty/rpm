#!/bin/bash
# set -o pipefail
#==============================================================#
# File      :   build
# Desc      :   build an extension (on el systems)
# Ctime     :   2024-10-13
# Mtime     :   2025-02-09
# Usage     :   build [debug] <extension> <versions...>
# Author    :   Ruohang Feng (rh@vonng.com)
# License   :   Apache-2.0
#==============================================================#
PROG_NAME="$(basename $0)"
PROG_DIR="$(cd $(dirname $0) && pwd)"
SPEC_DIR="${PROG_DIR}/SPECS"
RPMS_DIR="${PROG_DIR}/RPMS"

#--------------------------------------------------------------#
# Usage
#--------------------------------------------------------------#
# build [debug] <extension> <versions...>
# ./build pg_roaringbitmap         13 14 15 16 17 18
# ./build pgjwt            debug   13 14 15 16 17 18

#--------------------------------------------------------------#
# Log Util
#--------------------------------------------------------------#
# if output is a terminal, setup color alias, else use empty str
if [[ -t 1 ]]; then
    __CN='\033[0m';__CB='\033[0;30m';__CR='\033[0;31m';__CG='\033[0;32m';
    __CY='\033[0;33m';__CB='\033[0;34m';__CM='\033[0;35m';__CC='\033[0;36m';__CW='\033[0;37m';
else
    __CN='';__CB='';__CR='';__CG='';__CY='';__CB='';__CM='';__CC='';__CW='';
fi
function log_info()  { printf "[${__CG} OK ${__CN}] ${__CG}%s${__CN}\n" "$*"; }
function log_warn()  { printf "[${__CY}WARN${__CN}] ${__CY}%s${__CN}\n" "$*"; }
function log_error() { printf "[${__CR}FAIL${__CN}] ${__CR}%s${__CN}\n" "$*"; }
function log_red()   { printf "[${__CR}WARN${__CN}] ${__CR}%s${__CN}\n" "$*"; }
function log_debug() { printf "[${__CB}HINT${__CN}] ${__CB}%s${__CN}\n" "$*"; }
function log_title() { printf "[${__CG}%s${__CN}] ${__CG}%s${__CN}\n" "$1" "$2"; }
function log_hint()  { printf "${__CB}%s${__CN}\n" "$*"; }
function log_line()  { printf "${__CM}[%s] ===========================================${__CN}\n" "$*"; }


#--------------------------------------------------------------#
# ARGS
#--------------------------------------------------------------#
EXTENSION_NAME=$1
shift

# Build rpmbuild args array - default is to disable debug packages
declare -a BUILD_ARGS=()
if [[ "$1" == "debug" || "$1" == "dbg" ]]; then
    # Enable debug packages by not adding the disable macro
    shift
else
    # Disable debug packages (default behavior)
    BUILD_ARGS+=(--define "debug_package %{nil}")
fi

# Detect OS version for EL10+ special handling
OS_VERSION=$(rpm -E '%{rhel}' 2>/dev/null || echo "0")
if [[ "$OS_VERSION" =~ ^[0-9]+$ ]] && [[ "$OS_VERSION" -ge 10 ]]; then
    export QA_RPATHS=3
fi

VERSIONS=""
if [ $# -eq 0 ]; then
    VERSIONS="13 14 15 16 17"
else

    # Validate versions
    VALID_VERSIONS="10 11 12 13 14 15 16 17 18 19 20"
    for arg in "$@"; do
        found=false
        for ver in ${VALID_VERSIONS}; do
            if [ "${ver}" = "${arg}" ]; then
                found="true"
            fi
        done
        if [[ "${found}" != "true" ]]; then
            log_error "invalid pg version: ${arg}"
            exit 1
        fi
    done
    VERSIONS=$@
fi


#--------------------------------------------------------------#
# Check Spec
#--------------------------------------------------------------#
SPEC_FILE="${SPEC_DIR}/${EXTENSION_NAME}.spec"

if [ -f "${SPEC_FILE}" ]; then
    log_line "${EXTENSION_NAME} spec file"
else
    log_error "rpm spec not found: ${SPEC_FILE}"
    exit 1
fi

cat ${SPEC_FILE} | grep -E '^Version:|^Release:|^Summary:|^License:|^URL:|^Source0:'


#--------------------------------------------------------------#
# Check RPMs
#--------------------------------------------------------------#
ARCH=$(uname -m)
if [ -d "${RPMS_DIR}/${ARCH}" ]; then
    log_line "${EXTENSION_NAME} rpms dir"
    ls -alh ${RPMS_DIR}/${ARCH} | grep "${EXTENSION_NAME}"
    log_warn "existing ${EXTENSION_NAME} rpms will be removed"
    log_hint rm -rf "${RPMS_DIR}/${ARCH}/${EXTENSION_NAME}*.rpm"
    #rm -rf "${RPMS_DIR}/${ARCH}/${EXTENSION_NAME}*.rpm"
fi


#--------------------------------------------------------------#
# Building for each pgmajorversion
#--------------------------------------------------------------#
for ver in $VERSIONS; do
    log_line "${EXTENSION_NAME} for PG$ver"
    export PATH=/usr/bin:/usr/pgsql-${ver}/bin:/root/.cargo/bin:/pg/bin:/usr/share/Modules/bin:/usr/lib64/ccache:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/home/vagrant/.cargo/bin;

    # Build command with proper argument expansion
    log_hint "\$" rpmbuild "${BUILD_ARGS[@]}" --define "pgmajorversion ${ver}" -ba "~/rpmbuild/SPECS/${EXTENSION_NAME}.spec"
    rpmbuild "${BUILD_ARGS[@]}" --define "pgmajorversion ${ver}" -ba "${SPEC_FILE}"
done


#--------------------------------------------------------------#
# Print RPM List
#--------------------------------------------------------------#
log_line "${EXTENSION_NAME} rpms"
log_info "${RPMS_DIR}"
ARCH=$(uname -m)
if [ -d "${RPMS_DIR}/${ARCH}" ]; then
    ls -alh ${RPMS_DIR}/${ARCH} | grep "${EXTENSION_NAME}"
fi
log_line "${EXTENSION_NAME} done"